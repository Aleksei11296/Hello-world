from random import randint
class BoardException(Exception):
    pass
class BoardOutShipException(BoardException):
    def __str__(self):
        return 'Вы пытаетесь выстрелить за пределы доски!'
class BoardUsedShipException(BoardException):
    def __str__(self):
        return 'Вы уже стреляли сюда'
class BoardWrongShipException(BoardException):
    pass


class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f'Dot({self.x}, {self.y})'

class Ship:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
        self.lives = b

    @property
    def dots(self):
        ship_dots = []
        for i in range(self.b):
            sur_x = self.a.x
            sur_y = self.a.y

            if self.c == 0:
                sur_x += i
            elif self.c == 1:
                sur_y += i

            ship_dots.append(Dot(sur_x, sur_y))

        return ship_dots
    def shot(self, shoting):
        return  shoting in self.dots

class Board:
    def __init__(self, hid = False, size = 6):
        self.hid = hid
        self.size = size

        self.count = 0

        self.field = [['O'] * size for _ in range(size)]

        self.busy = []
        self.ship = []

    def __str__(self):
        res = ''
        res += '  | 1 | 2 | 3 | 4 | 5 | 6 |' + '\n  _________________________'
        for i, row in enumerate(self.field):
            res += f'\n{i+1} | ' + ' | '.join(row) + ' |'

        if self.hid:
            res = res.replace('■', 'O')
        return  res

    def out(self, d):
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

    def contur(self, ship, verb = False):
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.dots:
            for dx, dy in near:
                cur = Dot(d.x +dx, d.y + dy)
                if not (self.out(cur) and cur not in self.busy):
                    if verb:
                        self.field[cur.x][cur.y] = '.'
                    self.busy.append(cur)

    def add_ship(self, ship):
        for d in ship.dots:
            if self.out(d) or d in self.busy:
                raise BoardWrongShipException()
        for d in ship.dots:
            self.field[d.x][d.y] = '■'
            self. busy.append(d)

        self.ship.append(ship)
        self.contur(ship)
    def shot(self, d):
        if self.out(d):
            raise BoardOutShipException()
        if d in self.busy:
            raise BoardUsedShipException()

        self.busy.append(d)

        for ship in self.ship:
            if ship.shot(d):
                ship.lives -= 1
                self.field[d.x][d.y] = 'X'
                if ship.lives == 0:
                    self.count += 1
                    self.contur(ship, verb = True)
                    print('Корабль уничтожен!')
                    return False
                else:
                    print('Корабль ранен!')
                    return  True
        self.field[d.x][d.y] = '.'
        print('Мимо!')
        return False
    def begin(self):
        self.busy = []

    def defeat(self):
        return self.count == len(self.ship)

class Player:
    def __init__(self, board, enemy):
        self.board = board
        self. enemy = enemy
    def ask(self):
        raise NotImplementedError

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)

class Ai(Player):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        print(f'Ход компьютера: {d.x + 1} {d.y + 1}')
        return d
class User(Player):
    def ask(self):
        while True:
            cords = input('Ваш ход:  ').split()
            if len(cords) != 2:
                print('Введите 2 координаты!  ')
                continue
            x,y = cords

            if not(x.isdigit()) or not(y.isdigit()):
                print('Введите число:  ')
                continue
            x, y = int(x), int(y)
            return Dot(x-1, y-1)

class Game:
    def __init__(self, size = 6):
        self.size = size
        pl = self.random_board()
        co = self.random_board()
        co.hide = True

        self.ai = Ai(co, pl)
        self.us = User(pl, co)

    def try_board(self):
        lens = [3, 2, 2, 1, 1, 1, 1]
        board = Board(size = self.size)
        att = 0
        for l in lens:
            while True:
                att += 1
                if att > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board

    def random_board(self):
        board = None
        while board is None:
            board = self.try_board()
        return board

    def greet(self):
        print("-------------------")
        print("  Приветсвуем Вас  ")
        print("      в игре       ")
        print("    морской бой    ")
        print("-------------------")
        print(" формат ввода: x y ")
        print(" x - номер строки  ")
        print(" y - номер столбца ")

    def print_board(self):
        print('-' * 20)
        print('Доска пользователя')
        print(self.us.board)
        print('-' * 20)
        print('Доска компьютера')
        print(self.ai.board)
        print('-' * 20)
    def loop(self):
        num = 0
        while True:
            self.print_board()
            if num % 2 == 0:
                print('Ваш ход!')
                repear = self.us.move()
            else:
                print('Ход компьютера!')
                repear = self.ai.move()

            if repear:
                num -= 1

            if self.ai.board.defeat():
                self.print_board()
                print('-'*20)
                print('Вы победили!!!')
                break
            if self.us.board.defeat():
                self.print_board()
                print('-'*20)
                print('Компьютер победил!!!')
                break
            num += 1
    def start(self):
        self.greet()
        self.loop()

g = Game()
g.start()
